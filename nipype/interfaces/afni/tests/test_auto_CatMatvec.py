# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from __future__ import unicode_literals
from ..utils import CatMatvec


def test_CatMatvec_inputs():
    input_map = dict(args=dict(argstr='%s',
    ),
    environ=dict(nohash=True,
    usedefault=True,
    ),
    fourxfour=dict(argstr='-4x4',
    descr='Output matrix in augmented form (last row is 0 0 0 1)This option does not work with -MATRIX or -ONELINE',
    xor=['matrix', 'oneline'],
    ),
    ignore_exception=dict(nohash=True,
    usedefault=True,
    ),
    in_file=dict(argstr='%s',
    descr='list of tuples of mfiles and associated opkeys',
    mandatory=True,
    position=-2,
    ),
    matrix=dict(argstr='-MATRIX',
    descr="indicates that the resulting matrix willbe written to outfile in the 'MATRIX(...)' format (FORM 3).This feature could be used, with clever scripting, to inputa matrix directly on the command line to program 3dWarp.",
    xor=['oneline', 'fourxfour'],
    ),
    num_threads=dict(nohash=True,
    usedefault=True,
    ),
    oneline=dict(argstr='-ONELINE',
    descr='indicates that the resulting matrixwill simply be written as 12 numbers on one line.',
    xor=['matrix', 'fourxfour'],
    ),
    out_file=dict(argstr=' > %s',
    descr='File to write concattenated matvecs to',
    mandatory=True,
    position=-1,
    ),
    outputtype=dict(),
    terminal_output=dict(deprecated='1.0.0',
    nohash=True,
    ),
    )
    inputs = CatMatvec.input_spec()

    for key, metadata in list(input_map.items()):
        for metakey, value in list(metadata.items()):
            assert getattr(inputs.traits()[key], metakey) == value


def test_CatMatvec_outputs():
    output_map = dict(out_file=dict(),
    )
    outputs = CatMatvec.output_spec()

    for key, metadata in list(output_map.items()):
        for metakey, value in list(metadata.items()):
            assert getattr(outputs.traits()[key], metakey) == value
