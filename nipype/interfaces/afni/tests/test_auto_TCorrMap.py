# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from __future__ import unicode_literals
from ..preprocess import TCorrMap


def test_TCorrMap_inputs():
    input_map = dict(
        absolute_threshold=dict(
            argstr='-Thresh %f %s',
            name_source='in_file',
            suffix='_thresh',
            usedefault=True,
            xor=('absolute_threshold', 'var_absolute_threshold',
                 'var_absolute_threshold_normalize'),
        ),
        args=dict(argstr='%s', ),
        automask=dict(argstr='-automask', ),
        average_expr=dict(
            argstr='-Aexpr %s %s',
            name_source='in_file',
            suffix='_aexpr',
            usedefault=True,
            xor=('average_expr', 'average_expr_nonzero', 'sum_expr'),
        ),
        average_expr_nonzero=dict(
            argstr='-Cexpr %s %s',
            name_source='in_file',
            suffix='_cexpr',
            usedefault=True,
            xor=('average_expr', 'average_expr_nonzero', 'sum_expr'),
        ),
        bandpass=dict(argstr='-bpass %f %f', ),
        blur_fwhm=dict(argstr='-Gblur %f', ),
        correlation_maps=dict(
            argstr='-CorrMap %s',
            name_source='in_file',
            usedefault=True,
        ),
        correlation_maps_masked=dict(
            argstr='-CorrMask %s',
            name_source='in_file',
            usedefault=True,
        ),
        environ=dict(
            nohash=True,
            usedefault=True,
        ),
        expr=dict(),
        histogram=dict(
            argstr='-Hist %d %s',
            name_source='in_file',
            suffix='_hist',
            usedefault=True,
        ),
        histogram_bin_numbers=dict(),
        in_file=dict(
            argstr='-input %s',
            copyfile=False,
            mandatory=True,
            usedefault=True,
        ),
        mask=dict(
            argstr='-mask %s',
            usedefault=True,
        ),
        mean_file=dict(
            argstr='-Mean %s',
            name_source='in_file',
            suffix='_mean',
            usedefault=True,
        ),
        num_threads=dict(
            nohash=True,
            usedefault=True,
        ),
        outputtype=dict(),
        pmean=dict(
            argstr='-Pmean %s',
            name_source='in_file',
            suffix='_pmean',
            usedefault=True,
        ),
        polort=dict(argstr='-polort %d', ),
        qmean=dict(
            argstr='-Qmean %s',
            name_source='in_file',
            suffix='_qmean',
            usedefault=True,
        ),
        regress_out_timeseries=dict(argstr='-ort %s', ),
        seeds=dict(
            argstr='-seed %s',
            usedefault=True,
            xor='seeds_width',
        ),
        seeds_width=dict(
            argstr='-Mseed %f',
            xor='seeds',
        ),
        sum_expr=dict(
            argstr='-Sexpr %s %s',
            name_source='in_file',
            suffix='_sexpr',
            usedefault=True,
            xor=('average_expr', 'average_expr_nonzero', 'sum_expr'),
        ),
        thresholds=dict(),
        var_absolute_threshold=dict(
            argstr='-VarThresh %f %f %f %s',
            name_source='in_file',
            suffix='_varthresh',
            usedefault=True,
            xor=('absolute_threshold', 'var_absolute_threshold',
                 'var_absolute_threshold_normalize'),
        ),
        var_absolute_threshold_normalize=dict(
            argstr='-VarThreshN %f %f %f %s',
            name_source='in_file',
            suffix='_varthreshn',
            usedefault=True,
            xor=('absolute_threshold', 'var_absolute_threshold',
                 'var_absolute_threshold_normalize'),
        ),
        zmean=dict(
            argstr='-Zmean %s',
            name_source='in_file',
            suffix='_zmean',
            usedefault=True,
        ),
    )
    inputs = TCorrMap.input_spec()

    for key, metadata in list(input_map.items()):
        for metakey, value in list(metadata.items()):
            assert getattr(inputs.traits()[key], metakey) == value
def test_TCorrMap_outputs():
    output_map = dict(
        absolute_threshold=dict(usedefault=True, ),
        average_expr=dict(usedefault=True, ),
        average_expr_nonzero=dict(usedefault=True, ),
        correlation_maps=dict(usedefault=True, ),
        correlation_maps_masked=dict(usedefault=True, ),
        histogram=dict(usedefault=True, ),
        mean_file=dict(usedefault=True, ),
        pmean=dict(usedefault=True, ),
        qmean=dict(usedefault=True, ),
        sum_expr=dict(usedefault=True, ),
        var_absolute_threshold=dict(usedefault=True, ),
        var_absolute_threshold_normalize=dict(usedefault=True, ),
        zmean=dict(usedefault=True, ),
    )
    outputs = TCorrMap.output_spec()

    for key, metadata in list(output_map.items()):
        for metakey, value in list(metadata.items()):
            assert getattr(outputs.traits()[key], metakey) == value
