# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from __future__ import unicode_literals
from ..model import Deconvolve


def test_Deconvolve_inputs():
    input_map = dict(STATmask=dict(argstr='-STATmask %s',
    ),
    TR_1D=dict(argstr='-TR_1D %f',
    ),
    args=dict(argstr='%s',
    ),
    automask=dict(argstr='-automask',
    ),
    censor=dict(argstr='-censor %s',
    ),
    environ=dict(nohash=True,
    usedefault=True,
    ),
    force_TR=dict(argstr='-force_TR %d',
    ),
    fout=dict(argstr='-fout',
    ),
    global_times=dict(argstr='-global_times',
    xor=['local_times'],
    ),
    glt_label=dict(argstr='-glt_label %d %s...',
    requires=['gltsym'],
    ),
    gltsym=dict(argstr='-gltsym SYM: %s...',
    ),
    ignore_exception=dict(nohash=True,
    usedefault=True,
    ),
    in_files=dict(argstr='-input %s',
    copyfile=False,
    mandatory=True,
    sep=' ',
    ),
    input1D=dict(argstr='-input1D %s',
    ),
    jobs=dict(argstr='-jobs %d',
    ),
    legendre=dict(argstr='-legendre',
    ),
    local_times=dict(argstr='-local_times',
    xor=['global_times'],
    ),
    mask=dict(argstr='-mask %s',
    ),
    noblock=dict(argstr='-noblock',
    ),
    nolegendre=dict(argstr='-nolegendre',
    ),
    num_glt=dict(argstr='-num_glt %d',
    position=1,
    ),
    num_stimts=dict(argstr='-num_stimts %d',
    position=0,
    ),
    ortvec=dict(argstr='ortvec %s',
    ),
    out_file=dict(argstr='-bucket %s',
    ),
    outputtype=dict(),
    polort=dict(argstr='-polort %d',
    ),
    rout=dict(argstr='-rout',
    ),
    sat=dict(argstr='-sat',
    xor=['trans'],
    ),
    stim_label=dict(argstr='-stim_label %d %s...',
    requires=['stim_times'],
    ),
    stim_times=dict(argstr='-stim_times %d %s %s...',
    ),
    stim_times_subtract=dict(argstr='-stim_times_subtract %f',
    ),
    terminal_output=dict(nohash=True,
    ),
    tout=dict(argstr='-tout',
    ),
    trans=dict(argstr='-trans',
    xor=['sat'],
    ),
    vout=dict(argstr='-vout',
    ),
    x1D=dict(argstr='-x1D %s',
    ),
    x1D_stop=dict(argstr='-x1D_stop',
    ),
    )
    inputs = Deconvolve.input_spec()

    for key, metadata in list(input_map.items()):
        for metakey, value in list(metadata.items()):
            assert getattr(inputs.traits()[key], metakey) == value


def test_Deconvolve_outputs():
    output_map = dict(out_file=dict(),
    reml_script=dict(),
    x1D=dict(),
    )
    outputs = Deconvolve.output_spec()

    for key, metadata in list(output_map.items()):
        for metakey, value in list(metadata.items()):
            assert getattr(outputs.traits()[key], metakey) == value
