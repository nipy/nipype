# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from __future__ import unicode_literals
from ..model import Remlfit


def test_Remlfit_inputs():
    input_map = dict(
        STATmask=dict(
            argstr='-STATmask %s',
            usedefault=True,
        ),
        addbase=dict(
            argstr='-addbase %s',
            copyfile=False,
            sep=' ',
        ),
        args=dict(argstr='%s', ),
        automask=dict(
            argstr='-automask',
            usedefault=True,
        ),
        dsort=dict(
            argstr='-dsort %s',
            copyfile=False,
            usedefault=True,
        ),
        dsort_nods=dict(
            argstr='-dsort_nods',
            requires=['dsort'],
        ),
        environ=dict(
            nohash=True,
            usedefault=True,
        ),
        errts_file=dict(
            argstr='-Rerrts %s',
            usedefault=True,
        ),
        fitts_file=dict(
            argstr='-Rfitts %s',
            usedefault=True,
        ),
        fout=dict(argstr='-fout', ),
        glt_file=dict(
            argstr='-Rglt %s',
            usedefault=True,
        ),
        gltsym=dict(argstr='-gltsym "%s" %s...', ),
        in_files=dict(
            argstr='-input "%s"',
            copyfile=False,
            mandatory=True,
            sep=' ',
        ),
        mask=dict(
            argstr='-mask %s',
            usedefault=True,
        ),
        matim=dict(
            argstr='-matim %s',
            xor=['matrix'],
        ),
        matrix=dict(
            argstr='-matrix %s',
            mandatory=True,
            usedefault=True,
        ),
        nobout=dict(argstr='-nobout', ),
        nodmbase=dict(
            argstr='-nodmbase',
            requires=['addbase', 'dsort'],
        ),
        nofdr=dict(argstr='-noFDR', ),
        num_threads=dict(
            nohash=True,
            usedefault=True,
        ),
        obeta=dict(
            argstr='-Obeta %s',
            usedefault=True,
        ),
        obuck=dict(
            argstr='-Obuck %s',
            usedefault=True,
        ),
        oerrts=dict(
            argstr='-Oerrts %s',
            usedefault=True,
        ),
        ofitts=dict(
            argstr='-Ofitts %s',
            usedefault=True,
        ),
        oglt=dict(
            argstr='-Oglt %s',
            usedefault=True,
        ),
        out_file=dict(
            argstr='-Rbuck %s',
            usedefault=True,
        ),
        outputtype=dict(),
        ovar=dict(
            argstr='-Ovar %s',
            usedefault=True,
        ),
        polort=dict(
            argstr='-polort %d',
            xor=['matrix'],
        ),
        quiet=dict(argstr='-quiet', ),
        rbeta_file=dict(
            argstr='-Rbeta %s',
            usedefault=True,
        ),
        rout=dict(argstr='-rout', ),
        slibase=dict(argstr='-slibase %s', ),
        slibase_sm=dict(argstr='-slibase_sm %s', ),
        tout=dict(argstr='-tout', ),
        usetemp=dict(argstr='-usetemp', ),
        var_file=dict(
            argstr='-Rvar %s',
            usedefault=True,
        ),
        verb=dict(argstr='-verb', ),
        wherr_file=dict(
            argstr='-Rwherr %s',
            usedefault=True,
        ),
    )
    inputs = Remlfit.input_spec()

    for key, metadata in list(input_map.items()):
        for metakey, value in list(metadata.items()):
            assert getattr(inputs.traits()[key], metakey) == value
def test_Remlfit_outputs():
    output_map = dict(
        errts_file=dict(usedefault=True, ),
        fitts_file=dict(usedefault=True, ),
        glt_file=dict(usedefault=True, ),
        obeta=dict(usedefault=True, ),
        obuck=dict(usedefault=True, ),
        oerrts=dict(usedefault=True, ),
        ofitts=dict(usedefault=True, ),
        oglt=dict(usedefault=True, ),
        out_file=dict(usedefault=True, ),
        ovar=dict(usedefault=True, ),
        rbeta_file=dict(usedefault=True, ),
        var_file=dict(usedefault=True, ),
        wherr_file=dict(usedefault=True, ),
    )
    outputs = Remlfit.output_spec()

    for key, metadata in list(output_map.items()):
        for metakey, value in list(metadata.items()):
            assert getattr(outputs.traits()[key], metakey) == value
