# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from ....testing import assert_equal
from ..dti import DTIFit


def test_DTIFit_inputs():
    input_map = dict(args=dict(argstr='%s',
    ),
    base_name=dict(argstr='-o %s',
    position=1,
    usedefault=True,
    ),
    bvals=dict(argstr='-b %s',
    mandatory=True,
    position=4,
    ),
    bvecs=dict(argstr='-r %s',
    mandatory=True,
    position=3,
    ),
    cni=dict(argstr='--cni=%s',
    ),
    dwi=dict(argstr='-k %s',
    mandatory=True,
    position=0,
    ),
    environ=dict(nohash=True,
    usedefault=True,
    ),
    gradnonlin=dict(argstr='--gradnonlin=%s',
    ),
    ignore_exception=dict(nohash=True,
    usedefault=True,
    ),
    little_bit=dict(argstr='--littlebit',
    ),
    mask=dict(argstr='-m %s',
    mandatory=True,
    position=2,
    ),
    max_x=dict(argstr='-X %d',
    ),
    max_y=dict(argstr='-Y %d',
    ),
    max_z=dict(argstr='-Z %d',
    ),
    min_x=dict(argstr='-x %d',
    ),
    min_y=dict(argstr='-y %d',
    ),
    min_z=dict(argstr='-z %d',
    ),
    output_type=dict(usedefault=True,
    ),
    save_tensor=dict(argstr='--save_tensor',
    usedefault=True,
    ),
    sse=dict(argstr='--sse',
    ),
    terminal_output=dict(nohash=True,
    ),
    )
    inputs = DTIFit.input_spec()

    for key, metadata in list(input_map.items()):
        for metakey, value in list(metadata.items()):
            yield assert_equal, getattr(inputs.traits()[key], metakey), value


def test_DTIFit_outputs():
    output_map = dict(out_fa=dict(name_source='base_name',
    name_template='%s_FA',
    ),
    out_l1=dict(name_source='base_name',
    name_template='%s_L1',
    ),
    out_l2=dict(name_source='base_name',
    name_template='%s_L2',
    ),
    out_l3=dict(name_source='base_name',
    name_template='%s_L3',
    ),
    out_md=dict(name_source='base_name',
    name_template='%s_MD',
    ),
    out_mo=dict(name_source='base_name',
    name_template='%s_MO',
    ),
    out_s0=dict(name_source='base_name',
    name_template='%s_S0',
    ),
    out_v1=dict(name_source='base_name',
    name_template='%s_V1',
    ),
    out_v2=dict(name_source='base_name',
    name_template='%s_V2',
    ),
    out_v3=dict(name_source='base_name',
    name_template='%s_V3',
    ),
    tensor=dict(name_source='base_name',
    name_template='%s_tensor',
    ),
    )
    outputs = DTIFit.output_spec()

    for key, metadata in list(output_map.items()):
        for metakey, value in list(metadata.items()):
            yield assert_equal, getattr(outputs.traits()[key], metakey), value
