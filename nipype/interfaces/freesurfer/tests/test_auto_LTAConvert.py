# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from ..utils import LTAConvert


def test_LTAConvert_inputs():
    input_map = dict(
        args=dict(
            argstr="%s",
        ),
        environ=dict(
            nohash=True,
            usedefault=True,
        ),
        in_fsl=dict(
            argstr="--infsl %s",
            extensions=None,
            mandatory=True,
            xor=("in_lta", "in_fsl", "in_mni", "in_reg", "in_niftyreg", "in_itk"),
        ),
        in_itk=dict(
            argstr="--initk %s",
            extensions=None,
            mandatory=True,
            xor=("in_lta", "in_fsl", "in_mni", "in_reg", "in_niftyreg", "in_itk"),
        ),
        in_lta=dict(
            argstr="--inlta %s",
            mandatory=True,
            xor=("in_lta", "in_fsl", "in_mni", "in_reg", "in_niftyreg", "in_itk"),
        ),
        in_mni=dict(
            argstr="--inmni %s",
            extensions=None,
            mandatory=True,
            xor=("in_lta", "in_fsl", "in_mni", "in_reg", "in_niftyreg", "in_itk"),
        ),
        in_niftyreg=dict(
            argstr="--inniftyreg %s",
            extensions=None,
            mandatory=True,
            xor=("in_lta", "in_fsl", "in_mni", "in_reg", "in_niftyreg", "in_itk"),
        ),
        in_reg=dict(
            argstr="--inreg %s",
            extensions=None,
            mandatory=True,
            xor=("in_lta", "in_fsl", "in_mni", "in_reg", "in_niftyreg", "in_itk"),
        ),
        invert=dict(
            argstr="--invert",
        ),
        ltavox2vox=dict(
            argstr="--ltavox2vox",
            requires=["out_lta"],
        ),
        out_fsl=dict(
            argstr="--outfsl %s",
        ),
        out_itk=dict(
            argstr="--outitk %s",
        ),
        out_lta=dict(
            argstr="--outlta %s",
        ),
        out_mni=dict(
            argstr="--outmni %s",
        ),
        out_reg=dict(
            argstr="--outreg %s",
        ),
        source_file=dict(
            argstr="--src %s",
            extensions=None,
        ),
        target_conform=dict(
            argstr="--trgconform",
        ),
        target_file=dict(
            argstr="--trg %s",
            extensions=None,
        ),
    )
    inputs = LTAConvert.input_spec()

    for key, metadata in list(input_map.items()):
        for metakey, value in list(metadata.items()):
            assert getattr(inputs.traits()[key], metakey) == value


def test_LTAConvert_outputs():
    output_map = dict(
        out_fsl=dict(
            extensions=None,
        ),
        out_itk=dict(
            extensions=None,
        ),
        out_lta=dict(
            extensions=None,
        ),
        out_mni=dict(
            extensions=None,
        ),
        out_reg=dict(
            extensions=None,
        ),
    )
    outputs = LTAConvert.output_spec()

    for key, metadata in list(output_map.items()):
        for metakey, value in list(metadata.items()):
            assert getattr(outputs.traits()[key], metakey) == value
