# -*- coding: utf-8 -*-
# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-
# vi: set ft=python sts=4 ts=4 sw=4 et:
"""

Miscellaneous tools to support Interface functionality
......................................................

"""
from __future__ import (print_function, division, unicode_literals,
                        absolute_import)
from builtins import object, str

import os
from copy import deepcopy

from ... import logging, __version__
from ...utils.misc import is_container
from ...utils.filemanip import md5, to_str, hash_infile
iflogger = logging.getLogger('nipype.interface')


class NipypeInterfaceError(Exception):
    """Custom error for interfaces"""

    def __init__(self, value):
        self.value = value

    def __str__(self):
        return '{}'.format(self.value)


class InterfaceRuntime(object):
    """

    """
    __slots__ = [
        'cwd',
        'prevcwd',
        'returncode',
        'duration',
        'environ',
        'startTime',
        'endTime',
        'platform',
        'hostname',
        'version',
        'traceback',
        'traceback_args',
        'mem_peak_gb',
        'cpu_percent',
        'prof_dict',
        'cmdline',
        'stdout',
        'stderr',
        'merged',
        'command_path',
        'dependencies',
    ]

    def __init__(self, **inputs):
        for key in self.__class__.__slots__:
            setattr(self, key, inputs.get(key, None))

    def dictcopy(self):
        outdict = {}
        for key in self.__class__.__slots__:
            value = getattr(self, key, None)
            if value is not None:
                outdict[key] = value
        return outdict

    def items(self):
        for key in self.__class__.__slots__:
            value = getattr(self, key, None)
            if value is not None:
                yield (key, value)


class InterfaceResult(object):
    """Object that contains the results of running a particular Interface.

    Attributes
    ----------
    version : version of this Interface result object (a readonly property)
    interface : class type
        A copy of the `Interface` class that was run to generate this result.
    inputs :  a traits free representation of the inputs
    outputs : Bunch
        An `Interface` specific Bunch that contains all possible files
        that are generated by the interface.  The `outputs` are used
        as the `inputs` to another node when interfaces are used in
        the pipeline.
    runtime : Bunch

        Contains attributes that describe the runtime environment when
        the `Interface` was run.  Contains the attributes:

        * cmdline : The command line string that was executed
        * cwd : The directory the ``cmdline`` was executed in.
        * stdout : The output of running the ``cmdline``.
        * stderr : Any error messages output from running ``cmdline``.
        * returncode : The code returned from running the ``cmdline``.

    """
    __slots__ = ['interface', 'runtime', 'inputs', 'outputs', 'provenance']
    version = __version__

    def __init__(self,
                 interface,
                 runtime,
                 inputs=None,
                 outputs=None,
                 provenance=None):
        self.interface = interface
        self.runtime = runtime
        self.inputs = inputs
        self.outputs = outputs
        self.provenance = provenance
