# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from __future__ import unicode_literals
from ..brainsuite import Cerebro


def test_Cerebro_inputs():
    input_map = dict(
        args=dict(argstr='%s', ),
        costFunction=dict(
            argstr='-c %d',
            usedefault=True,
        ),
        environ=dict(
            nohash=True,
            usedefault=True,
        ),
        inputAtlasLabelFile=dict(
            argstr='--atlaslabels %s',
            mandatory=True,
            usedefault=True,
        ),
        inputAtlasMRIFile=dict(
            argstr='--atlas %s',
            mandatory=True,
            usedefault=True,
        ),
        inputBrainMaskFile=dict(
            argstr='-m %s',
            usedefault=True,
        ),
        inputMRIFile=dict(
            argstr='-i %s',
            mandatory=True,
            usedefault=True,
        ),
        keepTempFiles=dict(argstr='--keep', ),
        linearConvergence=dict(argstr='--linconv %f', ),
        outputAffineTransformFile=dict(
            argstr='--air %s',
            genfile=True,
            usedefault=True,
        ),
        outputCerebrumMaskFile=dict(
            argstr='-o %s',
            genfile=True,
            usedefault=True,
        ),
        outputLabelVolumeFile=dict(
            argstr='-l %s',
            genfile=True,
            usedefault=True,
        ),
        outputWarpTransformFile=dict(
            argstr='--warp %s',
            genfile=True,
            usedefault=True,
        ),
        tempDirectory=dict(argstr='--tempdir %s', ),
        tempDirectoryBase=dict(argstr='--tempdirbase %s', ),
        useCentroids=dict(argstr='--centroids', ),
        verbosity=dict(argstr='-v %d', ),
        warpConvergence=dict(argstr='--warpconv %f', ),
        warpLabel=dict(argstr='--warplevel %d', ),
    )
    inputs = Cerebro.input_spec()

    for key, metadata in list(input_map.items()):
        for metakey, value in list(metadata.items()):
            assert getattr(inputs.traits()[key], metakey) == value
def test_Cerebro_outputs():
    output_map = dict(
        outputAffineTransformFile=dict(usedefault=True, ),
        outputCerebrumMaskFile=dict(usedefault=True, ),
        outputLabelVolumeFile=dict(usedefault=True, ),
        outputWarpTransformFile=dict(usedefault=True, ),
    )
    outputs = Cerebro.output_spec()

    for key, metadata in list(output_map.items()):
        for metakey, value in list(metadata.items()):
            assert getattr(outputs.traits()[key], metakey) == value
