# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from __future__ import unicode_literals
from ..brains import FindCenterOfBrain


def test_FindCenterOfBrain_inputs():
    input_map = dict(
        args=dict(argstr='%s', ),
        axis=dict(argstr='--axis %d', ),
        backgroundValue=dict(argstr='--backgroundValue %d', ),
        clippedImageMask=dict(
            argstr='--clippedImageMask %s',
            hash_files=False,
        ),
        closingSize=dict(argstr='--closingSize %d', ),
        debugAfterGridComputationsForegroundImage=dict(
            argstr='--debugAfterGridComputationsForegroundImage %s',
            hash_files=False,
        ),
        debugClippedImageMask=dict(
            argstr='--debugClippedImageMask %s',
            hash_files=False,
        ),
        debugDistanceImage=dict(
            argstr='--debugDistanceImage %s',
            hash_files=False,
        ),
        debugGridImage=dict(
            argstr='--debugGridImage %s',
            hash_files=False,
        ),
        debugTrimmedImage=dict(
            argstr='--debugTrimmedImage %s',
            hash_files=False,
        ),
        environ=dict(
            nohash=True,
            usedefault=True,
        ),
        generateDebugImages=dict(argstr='--generateDebugImages ', ),
        headSizeEstimate=dict(argstr='--headSizeEstimate %f', ),
        headSizeLimit=dict(argstr='--headSizeLimit %f', ),
        ignore_exception=dict(
            deprecated='1.0.0',
            nohash=True,
            usedefault=True,
        ),
        imageMask=dict(argstr='--imageMask %s', ),
        inputVolume=dict(argstr='--inputVolume %s', ),
        maximize=dict(argstr='--maximize ', ),
        otsuPercentileThreshold=dict(argstr='--otsuPercentileThreshold %f', ),
        terminal_output=dict(
            deprecated='1.0.0',
            nohash=True,
        ),
    )
    inputs = FindCenterOfBrain.input_spec()

    for key, metadata in list(input_map.items()):
        for metakey, value in list(metadata.items()):
            assert getattr(inputs.traits()[key], metakey) == value
def test_FindCenterOfBrain_outputs():
    output_map = dict(
        clippedImageMask=dict(),
        debugAfterGridComputationsForegroundImage=dict(),
        debugClippedImageMask=dict(),
        debugDistanceImage=dict(),
        debugGridImage=dict(),
        debugTrimmedImage=dict(),
    )
    outputs = FindCenterOfBrain.output_spec()

    for key, metadata in list(output_map.items()):
        for metakey, value in list(metadata.items()):
            assert getattr(outputs.traits()[key], metakey) == value
