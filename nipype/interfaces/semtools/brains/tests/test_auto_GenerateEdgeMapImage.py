# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from .....testing import assert_equal
from ..utilities import GenerateEdgeMapImage


def test_GenerateEdgeMapImage_inputs():
    input_map = dict(args=dict(argstr='%s',
    ),
    environ=dict(nohash=True,
    usedefault=True,
    ),
    ignore_exception=dict(nohash=True,
    usedefault=True,
    ),
    inputMRVolumes=dict(argstr='--inputMRVolumes %s...',
    ),
    inputMask=dict(argstr='--inputMask %s',
    ),
    lowerPercentileMatching=dict(argstr='--lowerPercentileMatching %f',
    ),
    maximumOutputRange=dict(argstr='--maximumOutputRange %d',
    ),
    minimumOutputRange=dict(argstr='--minimumOutputRange %d',
    ),
    numberOfThreads=dict(argstr='--numberOfThreads %d',
    ),
    outputEdgeMap=dict(argstr='--outputEdgeMap %s',
    hash_files=False,
    ),
    outputMaximumGradientImage=dict(argstr='--outputMaximumGradientImage %s',
    hash_files=False,
    ),
    terminal_output=dict(nohash=True,
    ),
    upperPercentileMatching=dict(argstr='--upperPercentileMatching %f',
    ),
    )
    inputs = GenerateEdgeMapImage.input_spec()

    for key, metadata in list(input_map.items()):
        for metakey, value in list(metadata.items()):
            yield assert_equal, getattr(inputs.traits()[key], metakey), value


def test_GenerateEdgeMapImage_outputs():
    output_map = dict(outputEdgeMap=dict(),
    outputMaximumGradientImage=dict(),
    )
    outputs = GenerateEdgeMapImage.output_spec()

    for key, metadata in list(output_map.items()):
        for metakey, value in list(metadata.items()):
            yield assert_equal, getattr(outputs.traits()[key], metakey), value
