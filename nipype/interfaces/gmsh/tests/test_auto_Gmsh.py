# AUTO-GENERATED by tools/checkspecs.py - DO NOT EDIT
from nipype.testing import assert_equal
from nipype.interfaces.gmsh.main import Gmsh

def test_Gmsh_inputs():
    input_map = dict(accuracy_of_LCFIELD_for_1D_mesh=dict(argstr='-epslc1d',
    ),
    args=dict(argstr='%s',
    ),
    background_mesh_file=dict(argstr='-bgm %s',
    ),
    compute_element_sizes_from_curvature=dict(argstr='-clcurv',
    ),
    create_new=dict(argstr='-new',
    ),
    element_size_scaling_factor=dict(argstr='-clscale %d',
    ),
    environ=dict(nohash=True,
    usedefault=True,
    ),
    generate_microstructure=dict(argstr='-microstructure',
    ),
    geometrical_tolerance=dict(argstr='-tol %f',
    ),
    highorder_elasticity=dict(argstr='-hoElasticity %d',
    ),
    highorder_element_quality=dict(argstr='-hoMindisto %d',
    ),
    highorder_num_layers=dict(argstr='-hoNLayers %d',
    requires=['highorder_optimize'],
    ),
    highorder_optimize=dict(argstr='-hoOptimize',
    ),
    ignore_exception=dict(nohash=True,
    usedefault=True,
    ),
    ignore_partitions_boundaries=dict(argstr='-ignorePartBound',
    ),
    in_files=dict(argstr='%s',
    mandatory=True,
    position=-2,
    ),
    match_geometries_and_meshes=dict(argstr='-match',
    ),
    max_anisotropy=dict(argstr='-anisoMax %d',
    ),
    max_element_size=dict(argstr='-clmax %d',
    ),
    merge_next=dict(argstr='-merge',
    ),
    mesh_generation_dimension=dict(argstr='-%s',
    ),
    mesh_order=dict(argstr='-order %d',
    ),
    meshing_algorithm=dict(argstr='-algo %s',
    ),
    min_element_size=dict(argstr='-clmin %d',
    ),
    number_of_subdivisions=dict(argstr='-numsubedges',
    ),
    optimize_lloyd=dict(argstr='-optimize_lloyd',
    ),
    optimize_netgen=dict(argstr='-optimize_netgen',
    ),
    out_filename=dict(argstr='-o %s',
    genfile=True,
    position=-1,
    ),
    output_type=dict(usedefault=True,
    ),
    renumber_mesh_elements=dict(argstr='-renumber',
    ),
    run_consistency_checks_on_mesh=dict(argstr='-check',
    ),
    save_all_elements=dict(argstr='-saveall',
    ),
    save_vertices_with_parametric_coords=dict(argstr='-parametric',
    ),
    smoothing_ratio=dict(argstr='-smoothRatio %d',
    ),
    smoothing_steps=dict(argstr='-smooth %d',
    ),
    terminal_output=dict(mandatory=True,
    nohash=True,
    ),
    uniform_mesh_refinement=dict(argstr='-refine',
    ),
    unroll_geometry=dict(argstr='-0',
    ),
    use_binary_format=dict(argstr='-bin',
    ),
    version=dict(),
    )
    inputs = Gmsh.input_spec()

    for key, metadata in input_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(inputs.traits()[key], metakey), value

def test_Gmsh_outputs():
    output_map = dict(mesh_file=dict(),
    )
    outputs = Gmsh.output_spec()

    for key, metadata in output_map.items():
        for metakey, value in metadata.items():
            yield assert_equal, getattr(outputs.traits()[key], metakey), value

